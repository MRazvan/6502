#pragma once

#include "defines.h"


/*************************************************************/
/*************************************************************/
/********************* INTERRUPT TYPES ***********************/
/*************************************************************/
/*************************************************************/
typedef enum {
    NONE,
    NMI,
    IRQ
} CPU_INTR_MODE;

/*************************************************************/
/*************************************************************/
/********************* ADDRESSING MODES **********************/
/*************************************************************/
/*************************************************************/
typedef enum {
    UNKNOWN_ADDRESS_MODE,    // 0
    ABSOLUTE,                // 1
    ABSOLUTE_X,                // 2
    ABSOLUTE_Y,                // 3
    ACCUMULATOR,            // 4
    IMMEDIATE,                // 5
    IMPLIED,                // 6
    INDIRECT_X,                // 7
    INDIRECT,                // 8
    INDIRECT_Y,                // 9
    RELATIVE,                // 10
    ZEROPAGE,                // 11
    ZEROPAGE_X,                // 12
    ZEROPAGE_Y                // 13
}CPU_ADDRESS_MODE;

/*************************************************************/
/*************************************************************/
/************************* CPU FLAGS *************************/
/*************************************************************/
/*************************************************************/
#ifdef __LITTLE_ENDIAN__
typedef union {
    struct {
        u8 C : 1;
        u8 Z : 1;
        u8 I : 1;
        u8 D : 1;
        u8 B : 1;
        u8 _dummy : 1;
        u8 V : 1;
        u8 N : 1;
    };
    u8 flags;
} CPUFlags_t;
#else
typedef union {
    struct {
        u8 N : 1;
        u8 V : 1;
        u8 SS : 2;
        u8 D : 1;
        u8 I : 1;
        u8 Z : 1;
        u8 C : 1;
    };
    u8 flags;
} CPUFlags_t;
#endif

/*************************************************************/
/*************************************************************/
/*************************** CPU *****************************/
/*************************************************************/
/*************************************************************/
typedef struct {
    u8 A;            
    u8 X;
    u8 Y;
    u8 SP;
    u16 PC;
    u16 Address;                    // Calculated address based on Instruction addressing mode
    CPU_ADDRESS_MODE Mode;
    CPU_INTR_MODE Interrupt;
    CPUFlags_t P;
    u8 LastOpCode;
    u32 Cycles;                        // It won't take long to overflow, (4*10^9)/(~4 ticks / instr) -> 10^9 instructions, @ 10Mhz -> 10^9/10^7 -> 10^2 (100 seconds), not too much time
} stCPU;

/*************************************************************/
/*************************************************************/
/************************* CPU METHODS ***********************/
/*************************************************************/
/*************************************************************/
void    _cpu_init();
void    _cpu_reset();
u32     _cpu_step();
void    _cpu_push(u8);
u8      _cpu_pull();

void    _cpu_setN(u8);
void    _cpu_setZ(u8);

void    _cpu_addBranchCycles(u16);

void    _cpu_triggerNMI();
void    _cpu_triggerIRQ();
